{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5bdb4cee",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:55.418806Z",
     "iopub.status.busy": "2025-01-29T17:08:55.418283Z",
     "iopub.status.idle": "2025-01-29T17:08:56.602194Z",
     "shell.execute_reply": "2025-01-29T17:08:56.600694Z"
    },
    "papermill": {
     "duration": 1.198215,
     "end_time": "2025-01-29T17:08:56.604202",
     "exception": false,
     "start_time": "2025-01-29T17:08:55.405987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/house-rent-prediction-dataset/Dataset Glossary.txt\n",
      "/kaggle/input/house-rent-prediction-dataset/House_Rent_Dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e2a77783",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:56.620141Z",
     "iopub.status.busy": "2025-01-29T17:08:56.619641Z",
     "iopub.status.idle": "2025-01-29T17:08:59.368792Z",
     "shell.execute_reply": "2025-01-29T17:08:59.367566Z"
    },
    "papermill": {
     "duration": 2.759221,
     "end_time": "2025-01-29T17:08:59.370833",
     "exception": false,
     "start_time": "2025-01-29T17:08:56.611612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import OrdinalEncoder\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "660c9b84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.386352Z",
     "iopub.status.busy": "2025-01-29T17:08:59.385816Z",
     "iopub.status.idle": "2025-01-29T17:08:59.429345Z",
     "shell.execute_reply": "2025-01-29T17:08:59.428156Z"
    },
    "papermill": {
     "duration": 0.053433,
     "end_time": "2025-01-29T17:08:59.431364",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.377931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "file_path = \"/kaggle/input/house-rent-prediction-dataset/House_Rent_Dataset.csv\"  \n",
    "df = pd.read_csv(file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2af6646e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.446653Z",
     "iopub.status.busy": "2025-01-29T17:08:59.446219Z",
     "iopub.status.idle": "2025-01-29T17:08:59.479923Z",
     "shell.execute_reply": "2025-01-29T17:08:59.478779Z"
    },
    "papermill": {
     "duration": 0.043476,
     "end_time": "2025-01-29T17:08:59.481950",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.438474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Posted On</th>\n",
       "      <th>BHK</th>\n",
       "      <th>Rent</th>\n",
       "      <th>Size</th>\n",
       "      <th>Floor</th>\n",
       "      <th>Area Type</th>\n",
       "      <th>Area Locality</th>\n",
       "      <th>City</th>\n",
       "      <th>Furnishing Status</th>\n",
       "      <th>Tenant Preferred</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Point of Contact</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-05-18</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>1100</td>\n",
       "      <td>Ground out of 2</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Bandel</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>2</td>\n",
       "      <td>Contact Owner</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>2</td>\n",
       "      <td>20000</td>\n",
       "      <td>800</td>\n",
       "      <td>1 out of 3</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Phool Bagan, Kankurgachi</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Semi-Furnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-05-16</td>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1 out of 3</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Salt Lake City Sector 2</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Semi-Furnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-07-04</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>800</td>\n",
       "      <td>1 out of 2</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Dumdum Park</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-05-09</td>\n",
       "      <td>2</td>\n",
       "      <td>7500</td>\n",
       "      <td>850</td>\n",
       "      <td>1 out of 2</td>\n",
       "      <td>Carpet Area</td>\n",
       "      <td>South Dum Dum</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Posted On  BHK   Rent  Size            Floor    Area Type  \\\n",
       "0  2022-05-18    2  10000  1100  Ground out of 2   Super Area   \n",
       "1  2022-05-13    2  20000   800       1 out of 3   Super Area   \n",
       "2  2022-05-16    2  17000  1000       1 out of 3   Super Area   \n",
       "3  2022-07-04    2  10000   800       1 out of 2   Super Area   \n",
       "4  2022-05-09    2   7500   850       1 out of 2  Carpet Area   \n",
       "\n",
       "              Area Locality     City Furnishing Status  Tenant Preferred  \\\n",
       "0                    Bandel  Kolkata       Unfurnished  Bachelors/Family   \n",
       "1  Phool Bagan, Kankurgachi  Kolkata    Semi-Furnished  Bachelors/Family   \n",
       "2   Salt Lake City Sector 2  Kolkata    Semi-Furnished  Bachelors/Family   \n",
       "3               Dumdum Park  Kolkata       Unfurnished  Bachelors/Family   \n",
       "4             South Dum Dum  Kolkata       Unfurnished         Bachelors   \n",
       "\n",
       "   Bathroom Point of Contact  \n",
       "0         2    Contact Owner  \n",
       "1         1    Contact Owner  \n",
       "2         1    Contact Owner  \n",
       "3         1    Contact Owner  \n",
       "4         1    Contact Owner  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1f0f1e10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.497528Z",
     "iopub.status.busy": "2025-01-29T17:08:59.497152Z",
     "iopub.status.idle": "2025-01-29T17:08:59.537849Z",
     "shell.execute_reply": "2025-01-29T17:08:59.536453Z"
    },
    "papermill": {
     "duration": 0.05049,
     "end_time": "2025-01-29T17:08:59.539728",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.489238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4746 entries, 0 to 4745\n",
      "Data columns (total 12 columns):\n",
      " #   Column             Non-Null Count  Dtype \n",
      "---  ------             --------------  ----- \n",
      " 0   Posted On          4746 non-null   object\n",
      " 1   BHK                4746 non-null   int64 \n",
      " 2   Rent               4746 non-null   int64 \n",
      " 3   Size               4746 non-null   int64 \n",
      " 4   Floor              4746 non-null   object\n",
      " 5   Area Type          4746 non-null   object\n",
      " 6   Area Locality      4746 non-null   object\n",
      " 7   City               4746 non-null   object\n",
      " 8   Furnishing Status  4746 non-null   object\n",
      " 9   Tenant Preferred   4746 non-null   object\n",
      " 10  Bathroom           4746 non-null   int64 \n",
      " 11  Point of Contact   4746 non-null   object\n",
      "dtypes: int64(4), object(8)\n",
      "memory usage: 445.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "afe7791b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.556034Z",
     "iopub.status.busy": "2025-01-29T17:08:59.555621Z",
     "iopub.status.idle": "2025-01-29T17:08:59.581022Z",
     "shell.execute_reply": "2025-01-29T17:08:59.579853Z"
    },
    "papermill": {
     "duration": 0.035368,
     "end_time": "2025-01-29T17:08:59.582914",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.547546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BHK</th>\n",
       "      <th>Rent</th>\n",
       "      <th>Size</th>\n",
       "      <th>Bathroom</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4746.000000</td>\n",
       "      <td>4.746000e+03</td>\n",
       "      <td>4746.000000</td>\n",
       "      <td>4746.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.083860</td>\n",
       "      <td>3.499345e+04</td>\n",
       "      <td>967.490729</td>\n",
       "      <td>1.965866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.832256</td>\n",
       "      <td>7.810641e+04</td>\n",
       "      <td>634.202328</td>\n",
       "      <td>0.884532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.200000e+03</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000e+04</td>\n",
       "      <td>550.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.600000e+04</td>\n",
       "      <td>850.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.300000e+04</td>\n",
       "      <td>1200.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.500000e+06</td>\n",
       "      <td>8000.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               BHK          Rent         Size     Bathroom\n",
       "count  4746.000000  4.746000e+03  4746.000000  4746.000000\n",
       "mean      2.083860  3.499345e+04   967.490729     1.965866\n",
       "std       0.832256  7.810641e+04   634.202328     0.884532\n",
       "min       1.000000  1.200000e+03    10.000000     1.000000\n",
       "25%       2.000000  1.000000e+04   550.000000     1.000000\n",
       "50%       2.000000  1.600000e+04   850.000000     2.000000\n",
       "75%       3.000000  3.300000e+04  1200.000000     2.000000\n",
       "max       6.000000  3.500000e+06  8000.000000    10.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "62bb6b1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.599012Z",
     "iopub.status.busy": "2025-01-29T17:08:59.598614Z",
     "iopub.status.idle": "2025-01-29T17:08:59.608440Z",
     "shell.execute_reply": "2025-01-29T17:08:59.607365Z"
    },
    "papermill": {
     "duration": 0.019878,
     "end_time": "2025-01-29T17:08:59.610302",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.590424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Posted On            0\n",
       "BHK                  0\n",
       "Rent                 0\n",
       "Size                 0\n",
       "Floor                0\n",
       "Area Type            0\n",
       "Area Locality        0\n",
       "City                 0\n",
       "Furnishing Status    0\n",
       "Tenant Preferred     0\n",
       "Bathroom             0\n",
       "Point of Contact     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e3a68b99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.627056Z",
     "iopub.status.busy": "2025-01-29T17:08:59.626601Z",
     "iopub.status.idle": "2025-01-29T17:08:59.633792Z",
     "shell.execute_reply": "2025-01-29T17:08:59.632580Z"
    },
    "papermill": {
     "duration": 0.017653,
     "end_time": "2025-01-29T17:08:59.635665",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.618012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Kolkata', 'Mumbai', 'Bangalore', 'Delhi', 'Chennai', 'Hyderabad'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['City'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "44d4702f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.652489Z",
     "iopub.status.busy": "2025-01-29T17:08:59.652051Z",
     "iopub.status.idle": "2025-01-29T17:08:59.660502Z",
     "shell.execute_reply": "2025-01-29T17:08:59.659048Z"
    },
    "papermill": {
     "duration": 0.018976,
     "end_time": "2025-01-29T17:08:59.662588",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.643612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Unfurnished', 'Semi-Furnished', 'Furnished'], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Furnishing Status'].unique()\t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9dd0fc55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.680165Z",
     "iopub.status.busy": "2025-01-29T17:08:59.679754Z",
     "iopub.status.idle": "2025-01-29T17:08:59.688378Z",
     "shell.execute_reply": "2025-01-29T17:08:59.687155Z"
    },
    "papermill": {
     "duration": 0.019466,
     "end_time": "2025-01-29T17:08:59.690346",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.670880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Ground out of 2', '1 out of 3', '1 out of 2', 'Ground out of 1',\n",
       "       'Ground out of 4', '1 out of 4', '1 out of 1', 'Ground out of 3',\n",
       "       '2 out of 3', '4 out of 5', '2 out of 2', '2 out of 5',\n",
       "       '4 out of 14', '3 out of 3', '5 out of 5', '4 out of 4',\n",
       "       '7 out of 8', '2 out of 4', '3 out of 4', '1 out of 5',\n",
       "       '8 out of 5', 'Ground out of 6', '2 out of 1',\n",
       "       'Upper Basement out of 4', 'Ground out of 5', '3 out of 5',\n",
       "       '11 out of 19', '5 out of 10', '11 out of 14',\n",
       "       'Lower Basement out of 2', '2 out of 7', '4 out of 10',\n",
       "       '7 out of 10', '2 out of 13', '6 out of 7', '4 out of 7',\n",
       "       '14 out of 14', '43 out of 78', '2 out of 8', '13 out of 18',\n",
       "       '5 out of 12', '18 out of 24', '3 out of 7', '17 out of 31',\n",
       "       '11 out of 21', '7 out of 19', '14 out of 23', '9 out of 20',\n",
       "       'Upper Basement out of 9', '19 out of 24', '3 out of 21',\n",
       "       '1 out of 22', '8 out of 8', '6 out of 12', '4 out of 58',\n",
       "       'Upper Basement out of 16', '60 out of 66', '34 out of 48',\n",
       "       '5 out of 8', '5 out of 14', '14 out of 40', '5 out of 7',\n",
       "       '9 out of 22', '12 out of 18', '26 out of 44', '1 out of 8',\n",
       "       '25 out of 42', '25 out of 41', '53 out of 78', 'Ground out of 7',\n",
       "       '14 out of 20', '13 out of 20', '16 out of 23', '10 out of 18',\n",
       "       '39 out of 60', '16 out of 21', '10 out of 32', '4 out of 8',\n",
       "       '12 out of 24', '32 out of 41', '3 out of 30', '13 out of 21',\n",
       "       '9 out of 29', '47 out of 89', '7 out of 41', '28 out of 30',\n",
       "       '13 out of 15', '6 out of 21', '8 out of 16', '2 out of 6',\n",
       "       '5 out of 19', '3 out of 11', '17 out of 42', '10 out of 12',\n",
       "       '8 out of 28', '9 out of 15', '14 out of 22', '18 out of 40',\n",
       "       '9 out of 17', '12 out of 45', '25 out of 35', '7 out of 15',\n",
       "       '10 out of 16', 'Upper Basement out of 20', '5 out of 20',\n",
       "       'Upper Basement out of 40', '5 out of 18', '34 out of 58',\n",
       "       '4 out of 6', '20 out of 22', '12 out of 19', '15 out of 18',\n",
       "       '65 out of 78', '6 out of 16', '17 out of 22', '6 out of 24',\n",
       "       '40 out of 75', '19 out of 38', '15 out of 31', '11 out of 28',\n",
       "       '10 out of 22', '17 out of 24', '15 out of 19', '9 out of 10',\n",
       "       '7 out of 12', '8 out of 20', '11 out of 13', '9 out of 19',\n",
       "       '37 out of 51', '6 out of 11', '8 out of 15', '11 out of 20',\n",
       "       '10 out of 23', 'Upper Basement out of 10', '7 out of 23',\n",
       "       '4 out of 11', '17 out of 43', '7 out of 22', '14 out of 18',\n",
       "       '6 out of 10', '8 out of 12', '3 out of 18', '7 out of 7',\n",
       "       '14 out of 58', '18 out of 23', '19 out of 19', '13 out of 14',\n",
       "       '7 out of 11', '11 out of 22', 'Upper Basement out of 30',\n",
       "       '12 out of 14', '16 out of 31', '12 out of 13', '11 out of 51',\n",
       "       '2 out of 12', '22 out of 24', '7 out of 14', '5 out of 13',\n",
       "       '7 out of 21', '14 out of 21', '17 out of 25', '9 out of 14',\n",
       "       '8 out of 27', '3 out of 6', '17 out of 20', '18 out of 22',\n",
       "       '1 out of 7', '9 out of 30', '3 out of 8', '11 out of 26',\n",
       "       '17 out of 27', '4 out of 12', '12 out of 16', '10 out of 24',\n",
       "       '65 out of 76', '7 out of 9', '17 out of 60', '10 out of 11',\n",
       "       '18 out of 25', '5 out of 11', '15 out of 17', '15 out of 23',\n",
       "       '5 out of 17', '3 out of 28', '5 out of 24', '16 out of 32',\n",
       "       '21 out of 22', '7 out of 13', '9 out of 12', '15 out of 32',\n",
       "       '18 out of 27', '15 out of 16', '18 out of 45', '15 out of 15',\n",
       "       '6 out of 14', '1 out of 20', '16 out of 36', '30 out of 44',\n",
       "       '30 out of 37', '2 out of 9', '12 out of 22', '4 out of 9',\n",
       "       '2 out of 22', '5 out of 6', '6 out of 18', '35 out of 55',\n",
       "       '16 out of 29', '30 out of 45', '5 out of 9', '16 out of 25',\n",
       "       '33 out of 42', '4 out of 16', '13 out of 23', '9 out of 38',\n",
       "       '6 out of 8', '8 out of 13', '19 out of 30', '10 out of 14',\n",
       "       '11 out of 24', '9 out of 16', '9 out of 31', '4 out of 15',\n",
       "       '3 out of 9', '22 out of 30', '3 out of 58', '1 out of 9',\n",
       "       '53 out of 60', '5 out of 22', '15 out of 22', '19 out of 21',\n",
       "       '9 out of 40', 'Ground out of 8', '44 out of 75', '8 out of 17',\n",
       "       '3 out of 14', '12 out of 31', '26 out of 42', '2 out of 45',\n",
       "       '12 out of 68', '17 out of 36', '10 out of 28', '41 out of 41',\n",
       "       '14 out of 68', '14 out of 17', '15 out of 20', '46 out of 76',\n",
       "       '12 out of 20', '20 out of 30', '18 out of 32', '10 out of 25',\n",
       "       '17 out of 29', '10 out of 31', '10 out of 15', '13 out of 16',\n",
       "       '8 out of 10', '18 out of 21', '27 out of 58', '1 out of 6',\n",
       "       '19 out of 25', '3 out of 15', '25 out of 43', '8 out of 14',\n",
       "       '11 out of 12', '9 out of 21', '10 out of 13', '45 out of 77',\n",
       "       '18 out of 19', '10 out of 20', '12 out of 29',\n",
       "       'Lower Basement out of 18', '15 out of 24', '48 out of 68',\n",
       "       '12 out of 42', '16 out of 22', '35 out of 68', '18 out of 30',\n",
       "       '11 out of 31', '50 out of 75', '18 out of 26', '12 out of 27',\n",
       "       '16 out of 20', '24 out of 55', '16 out of 37',\n",
       "       'Upper Basement out of 7', '6 out of 15', '11 out of 27',\n",
       "       '11 out of 23', '3 out of 12', '14 out of 15', '23 out of 25',\n",
       "       '14 out of 48', '29 out of 35', '15 out of 36', '15 out of 25',\n",
       "       '15 out of 28', '3 out of 36', '8 out of 11', '6 out of 20',\n",
       "       '23 out of 23', '5 out of 15', '16 out of 18', '2 out of 10',\n",
       "       '40 out of 50', '25 out of 28', '12 out of 17', '34 out of 40',\n",
       "       'Upper Basement out of 22', '8 out of 23', '5 out of 21',\n",
       "       '32 out of 59', '20 out of 32', '9 out of 18', '10 out of 37',\n",
       "       '25 out of 48', '4 out of 22', '8 out of 18', '11 out of 11',\n",
       "       '5 out of 23', '60 out of 77', '11 out of 18', '4 out of 20',\n",
       "       '5 out of 16', '3 out of 13', '30 out of 58', '15 out of 43',\n",
       "       '7 out of 16', '18 out of 28', '9 out of 55', '11 out of 25',\n",
       "       '49 out of 55', '7 out of 27', '14 out of 27', '16 out of 27',\n",
       "       '25 out of 50', '6 out of 30', '21 out of 23', '8 out of 58',\n",
       "       '20 out of 41', '3 out of 62', '4 out of 13', '7 out of 17',\n",
       "       '12 out of 21', '28 out of 39', '15 out of 58', '6 out of 23',\n",
       "       '36 out of 45', '9 out of 28', '6 out of 45', '22 out of 52',\n",
       "       '10 out of 19', '21 out of 58', '48 out of 54', '7 out of 28',\n",
       "       '11 out of 15', '19 out of 22', '15 out of 37', '2 out of 17',\n",
       "       '76 out of 78', '3 out of 10', '20 out of 27', '8 out of 36',\n",
       "       '14 out of 33', '21 out of 21', '12 out of 25', '18 out of 29',\n",
       "       '14 out of 35', '7 out of 20', '20 out of 37', '9 out of 35',\n",
       "       '27 out of 27', '15 out of 60', '19 out of 33', '18 out of 20',\n",
       "       '13 out of 40', '9 out of 11', '8 out of 22', '6 out of 13',\n",
       "       '20 out of 31', '27 out of 45', '19 out of 20', '32 out of 46',\n",
       "       '19 out of 85', '3 out of 23', '34 out of 46', '4 out of 27',\n",
       "       '19 out of 27', '35 out of 60', '21 out of 33', '25 out of 52',\n",
       "       '2 out of 24', '24 out of 24', '18 out of 33', '1 out of 10',\n",
       "       '45 out of 60', '60 out of 71', '36 out of 81', '24 out of 60',\n",
       "       '16 out of 38', '8 out of 45', 'Ground out of 16', '8 out of 32',\n",
       "       '10 out of 10', '23 out of 40', '7 out of 18', '8 out of 19',\n",
       "       '6 out of 17', '16 out of 34', 'Ground out of 12', '6 out of 9',\n",
       "       'Ground out of 18', '20 out of 25', '3 out of 22', '9 out of 32',\n",
       "       '26 out of 32', '17 out of 18', '24 out of 25', '19 out of 26',\n",
       "       '17 out of 19', '1 out of 13', '14 out of 30', '8 out of 9',\n",
       "       '3 out of 17', 'Lower Basement out of 3', '12 out of 23',\n",
       "       'Ground out of 9', '1 out of 24', '1 out of 12', '3', 'Ground',\n",
       "       '15 out of 29', '20 out of 20', '14 out of 29',\n",
       "       'Lower Basement out of 1', '13 out of 17', '1 out of 14',\n",
       "       'Upper Basement out of 2', '2 out of 14', '24 out of 31',\n",
       "       '2 out of 32', '2 out of 16', '9 out of 13', '1 out of 11',\n",
       "       '6 out of 29', '9 out of 9', '28 out of 31', '1 out of 15',\n",
       "       'Ground out of 14', '2 out of 11', '19 out of 31', '1 out of 16',\n",
       "       '25 out of 32', '11 out of 16', '11 out of 17',\n",
       "       'Upper Basement out of 3', '4 out of 24', '1 out of 19',\n",
       "       '7 out of 30', '16 out of 19', 'Upper Basement out of 5',\n",
       "       'Ground out of 13', '2 out of 25', '23 out of 30', '4 out of 30',\n",
       "       '13 out of 25', '23 out of 35', 'Ground out of 10', '5 out of 34',\n",
       "       '20 out of 35', '1', '4 out of 31', '4 out of 26', '24 out of 33',\n",
       "       '4 out of 17', '1 out of 35', '11 out of 35', 'Ground out of 15',\n",
       "       'Ground out of 27', '15 out of 30', '12 out of 30', '23 out of 34'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Floor'].unique()\t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "647904f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.708262Z",
     "iopub.status.busy": "2025-01-29T17:08:59.707874Z",
     "iopub.status.idle": "2025-01-29T17:08:59.720681Z",
     "shell.execute_reply": "2025-01-29T17:08:59.719573Z"
    },
    "papermill": {
     "duration": 0.024269,
     "end_time": "2025-01-29T17:08:59.722862",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.698593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def process_floor(value):\n",
    "    try:\n",
    "        # Handle simple numeric values\n",
    "        if str(value).isdigit():\n",
    "            return int(value)\n",
    "            \n",
    "        # Split the string and take the first part before \"out of\"\n",
    "        floor_num = str(value).split(' out of ')[0].strip()\n",
    "        \n",
    "        # Convert numeric floors\n",
    "        if floor_num.isdigit():\n",
    "            return int(floor_num)\n",
    "        # Map text floors to numbers    \n",
    "        elif floor_num == 'Ground':\n",
    "            return 0\n",
    "        elif floor_num == 'Upper Basement':\n",
    "            return -1\n",
    "        elif floor_num == 'Lower Basement':\n",
    "            return -2\n",
    "        else:\n",
    "            return None\n",
    "            \n",
    "    except Exception:\n",
    "        return None\n",
    "\n",
    "# Extract just the floor column and process it\n",
    "# Assuming your floor information is in the 'FloorArea' column\n",
    "processed_floors = df['Floor'].apply(process_floor)\n",
    "\n",
    "# If you want to add it back to the DataFrame:\n",
    "df['Floor_Numbers'] = processed_floors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a864b495",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.742356Z",
     "iopub.status.busy": "2025-01-29T17:08:59.741994Z",
     "iopub.status.idle": "2025-01-29T17:08:59.756815Z",
     "shell.execute_reply": "2025-01-29T17:08:59.755627Z"
    },
    "papermill": {
     "duration": 0.026774,
     "end_time": "2025-01-29T17:08:59.758725",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.731951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Posted On</th>\n",
       "      <th>BHK</th>\n",
       "      <th>Rent</th>\n",
       "      <th>Size</th>\n",
       "      <th>Floor</th>\n",
       "      <th>Area Type</th>\n",
       "      <th>Area Locality</th>\n",
       "      <th>City</th>\n",
       "      <th>Furnishing Status</th>\n",
       "      <th>Tenant Preferred</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Point of Contact</th>\n",
       "      <th>Floor_Numbers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-05-18</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>1100</td>\n",
       "      <td>Ground out of 2</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Bandel</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>2</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>2</td>\n",
       "      <td>20000</td>\n",
       "      <td>800</td>\n",
       "      <td>1 out of 3</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Phool Bagan, Kankurgachi</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Semi-Furnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-05-16</td>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1 out of 3</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Salt Lake City Sector 2</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Semi-Furnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-07-04</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>800</td>\n",
       "      <td>1 out of 2</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Dumdum Park</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-05-09</td>\n",
       "      <td>2</td>\n",
       "      <td>7500</td>\n",
       "      <td>850</td>\n",
       "      <td>1 out of 2</td>\n",
       "      <td>Carpet Area</td>\n",
       "      <td>South Dum Dum</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Posted On  BHK   Rent  Size            Floor    Area Type  \\\n",
       "0  2022-05-18    2  10000  1100  Ground out of 2   Super Area   \n",
       "1  2022-05-13    2  20000   800       1 out of 3   Super Area   \n",
       "2  2022-05-16    2  17000  1000       1 out of 3   Super Area   \n",
       "3  2022-07-04    2  10000   800       1 out of 2   Super Area   \n",
       "4  2022-05-09    2   7500   850       1 out of 2  Carpet Area   \n",
       "\n",
       "              Area Locality     City Furnishing Status  Tenant Preferred  \\\n",
       "0                    Bandel  Kolkata       Unfurnished  Bachelors/Family   \n",
       "1  Phool Bagan, Kankurgachi  Kolkata    Semi-Furnished  Bachelors/Family   \n",
       "2   Salt Lake City Sector 2  Kolkata    Semi-Furnished  Bachelors/Family   \n",
       "3               Dumdum Park  Kolkata       Unfurnished  Bachelors/Family   \n",
       "4             South Dum Dum  Kolkata       Unfurnished         Bachelors   \n",
       "\n",
       "   Bathroom Point of Contact  Floor_Numbers  \n",
       "0         2    Contact Owner              0  \n",
       "1         1    Contact Owner              1  \n",
       "2         1    Contact Owner              1  \n",
       "3         1    Contact Owner              1  \n",
       "4         1    Contact Owner              1  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "31e508ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.777137Z",
     "iopub.status.busy": "2025-01-29T17:08:59.776761Z",
     "iopub.status.idle": "2025-01-29T17:08:59.784037Z",
     "shell.execute_reply": "2025-01-29T17:08:59.782721Z"
    },
    "papermill": {
     "duration": 0.018565,
     "end_time": "2025-01-29T17:08:59.785890",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.767325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of NULL values in Floor_Number column: 0\n"
     ]
    }
   ],
   "source": [
    "null_count = df['Floor_Numbers'].isnull().sum()\n",
    "print(f\"Number of NULL values in Floor_Number column: {null_count}\")\n",
    "\n",
    "if null_count > 0:\n",
    "    total_rows = len(df)\n",
    "    null_percentage = (null_count / total_rows) * 100\n",
    "    print(f\"Percentage of NULL values: {null_percentage:.2f}%\")\n",
    "    \n",
    "    print(\"\\nSample rows with NULL values:\")\n",
    "    print(df[df['Floor_Numbers'].isnull()][['FloorArea', 'Floor_Number']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b3617ca6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.803576Z",
     "iopub.status.busy": "2025-01-29T17:08:59.803175Z",
     "iopub.status.idle": "2025-01-29T17:08:59.812740Z",
     "shell.execute_reply": "2025-01-29T17:08:59.811563Z"
    },
    "papermill": {
     "duration": 0.020471,
     "end_time": "2025-01-29T17:08:59.814650",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.794179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Drop the FloorArea column\n",
    "df = df.drop('Floor', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "555da204",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.832373Z",
     "iopub.status.busy": "2025-01-29T17:08:59.832015Z",
     "iopub.status.idle": "2025-01-29T17:08:59.846901Z",
     "shell.execute_reply": "2025-01-29T17:08:59.845522Z"
    },
    "papermill": {
     "duration": 0.025662,
     "end_time": "2025-01-29T17:08:59.848689",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.823027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Posted On</th>\n",
       "      <th>BHK</th>\n",
       "      <th>Rent</th>\n",
       "      <th>Size</th>\n",
       "      <th>Area Type</th>\n",
       "      <th>Area Locality</th>\n",
       "      <th>City</th>\n",
       "      <th>Furnishing Status</th>\n",
       "      <th>Tenant Preferred</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Point of Contact</th>\n",
       "      <th>Floor_Numbers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-05-18</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>1100</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Bandel</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>2</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>2</td>\n",
       "      <td>20000</td>\n",
       "      <td>800</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Phool Bagan, Kankurgachi</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Semi-Furnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-05-16</td>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1000</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Salt Lake City Sector 2</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Semi-Furnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-07-04</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>800</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Dumdum Park</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-05-09</td>\n",
       "      <td>2</td>\n",
       "      <td>7500</td>\n",
       "      <td>850</td>\n",
       "      <td>Carpet Area</td>\n",
       "      <td>South Dum Dum</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Unfurnished</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Posted On  BHK   Rent  Size    Area Type             Area Locality  \\\n",
       "0  2022-05-18    2  10000  1100   Super Area                    Bandel   \n",
       "1  2022-05-13    2  20000   800   Super Area  Phool Bagan, Kankurgachi   \n",
       "2  2022-05-16    2  17000  1000   Super Area   Salt Lake City Sector 2   \n",
       "3  2022-07-04    2  10000   800   Super Area               Dumdum Park   \n",
       "4  2022-05-09    2   7500   850  Carpet Area             South Dum Dum   \n",
       "\n",
       "      City Furnishing Status  Tenant Preferred  Bathroom Point of Contact  \\\n",
       "0  Kolkata       Unfurnished  Bachelors/Family         2    Contact Owner   \n",
       "1  Kolkata    Semi-Furnished  Bachelors/Family         1    Contact Owner   \n",
       "2  Kolkata    Semi-Furnished  Bachelors/Family         1    Contact Owner   \n",
       "3  Kolkata       Unfurnished  Bachelors/Family         1    Contact Owner   \n",
       "4  Kolkata       Unfurnished         Bachelors         1    Contact Owner   \n",
       "\n",
       "   Floor_Numbers  \n",
       "0              0  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "05fce450",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:08:59.871692Z",
     "iopub.status.busy": "2025-01-29T17:08:59.871284Z",
     "iopub.status.idle": "2025-01-29T17:09:00.004791Z",
     "shell.execute_reply": "2025-01-29T17:09:00.003636Z"
    },
    "papermill": {
     "duration": 0.144813,
     "end_time": "2025-01-29T17:09:00.006755",
     "exception": false,
     "start_time": "2025-01-29T17:08:59.861942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Basic Statistics of Rent by Floor:\n",
      "                count           mean            std       min        25%  \\\n",
      "Floor_Numbers                                                              \n",
      "-2               11.0   54000.000000  115518.829634    8000.0   11500.00   \n",
      "-1               23.0   63000.000000   80850.451171    3500.0   12750.00   \n",
      " 0              927.0   16958.651564   24118.188773    1500.0    8000.00   \n",
      " 1             1161.0   20600.558140   32823.996243    1200.0    9000.00   \n",
      " 2              945.0   24087.138624   44107.013475    2200.0   10000.00   \n",
      " 3              512.0   28794.888672   41165.767265    3200.0   11500.00   \n",
      " 4              272.0   51410.911765  225943.614860    3500.0   14000.00   \n",
      " 5              164.0   57391.317073   67134.879397    6000.0   20000.00   \n",
      " 6               93.0   64924.720430   62298.716137    8000.0   26000.00   \n",
      " 7               74.0   71292.148649   90768.398065    5500.0   25000.00   \n",
      " 8               66.0   76316.803030   97826.025709    6000.0   30499.25   \n",
      " 9               65.0   75461.569231   59461.848588    6500.0   31000.00   \n",
      " 10              67.0   70964.179104   84169.334554   10000.0   36000.00   \n",
      " 11              43.0   87930.232558   85835.014875    6000.0   25500.00   \n",
      " 12              47.0   81478.723404   94020.115646   14500.0   36000.00   \n",
      " 13              15.0   41733.333333   28376.214050   15000.0   26000.00   \n",
      " 14              34.0   76220.588235   55437.268831   13500.0   40250.00   \n",
      " 15              41.0   69121.951220   62062.144308   14000.0   35000.00   \n",
      " 16              21.0   74452.380952   39381.437493   19500.0   50000.00   \n",
      " 17              22.0   86454.545455   87162.943892   14000.0   28250.00   \n",
      " 18              26.0  145730.769231  221578.980536   11000.0   29500.00   \n",
      " 19              16.0   93531.250000  108562.035837    8000.0   27500.00   \n",
      " 20              12.0  109583.333333   99009.144053   18000.0   42500.00   \n",
      " 21               6.0   97500.000000   77917.263812   22000.0   43250.00   \n",
      " 22               3.0  180000.000000   80000.000000  100000.0  140000.00   \n",
      " 23               9.0   65111.111111   38433.203238   17000.0   45000.00   \n",
      " 24               6.0  261666.666667  245248.173626   15000.0   96250.00   \n",
      " 25              12.0  108291.666667   84584.669343   18500.0   51000.00   \n",
      " 26               3.0   56000.000000    3605.551275   52000.0   54500.00   \n",
      " 27               3.0  121000.000000   77543.536159   68000.0   76500.00   \n",
      " 28               4.0  124250.000000   72885.183680   17000.0  109250.00   \n",
      " 29               1.0   90100.000000            NaN   90100.0   90100.00   \n",
      " 30               5.0  118600.000000   69027.530740   58000.0   75000.00   \n",
      " 32               3.0  138333.333333   58380.932960   75000.0  112500.00   \n",
      " 33               1.0  250000.000000            NaN  250000.0  250000.00   \n",
      " 34               4.0  182250.000000  157269.142979   44000.0   82250.00   \n",
      " 35               3.0  179333.333333   76559.345173   98000.0  144000.00   \n",
      " 36               2.0  232500.000000  208596.500450   85000.0  158750.00   \n",
      " 37               1.0  160000.000000            NaN  160000.0  160000.00   \n",
      " 39               1.0  350000.000000            NaN  350000.0  350000.00   \n",
      " 40               2.0  200000.000000   56568.542495  160000.0  180000.00   \n",
      " 41               1.0   85000.000000            NaN   85000.0   85000.00   \n",
      " 43               1.0  300000.000000            NaN  300000.0  300000.00   \n",
      " 44               1.0  310000.000000            NaN  310000.0  310000.00   \n",
      " 45               2.0  240000.000000  155563.491861  130000.0  185000.00   \n",
      " 46               1.0  250000.000000            NaN  250000.0  250000.00   \n",
      " 47               1.0  300000.000000            NaN  300000.0  300000.00   \n",
      " 48               2.0   72500.000000   10606.601718   65000.0   68750.00   \n",
      " 49               1.0   80000.000000            NaN   80000.0   80000.00   \n",
      " 50               1.0  380000.000000            NaN  380000.0  380000.00   \n",
      " 53               2.0  265000.000000   49497.474683  230000.0  247500.00   \n",
      " 60               3.0  116666.666667   30550.504633   90000.0  100000.00   \n",
      " 65               3.0  223333.333333   30550.504633  190000.0  210000.00   \n",
      " 76               1.0  280000.000000            NaN  280000.0  280000.00   \n",
      "\n",
      "                    50%       75%        max  \n",
      "Floor_Numbers                                 \n",
      "-2              15000.0   32500.0   400000.0  \n",
      "-1              30000.0   60000.0   310000.0  \n",
      " 0              11000.0   17000.0   300000.0  \n",
      " 1              13000.0   20000.0   600000.0  \n",
      " 2              14500.0   24000.0   850000.0  \n",
      " 3              17590.5   30000.0   530000.0  \n",
      " 4              22000.0   40000.0  3500000.0  \n",
      " 5              34999.5   60000.0   400000.0  \n",
      " 6              43000.0   80000.0   400000.0  \n",
      " 7              45000.0   74250.0   600000.0  \n",
      " 8              48000.0   79500.0   650000.0  \n",
      " 9              55000.0  110000.0   300000.0  \n",
      " 10             50000.0   65000.0   600000.0  \n",
      " 11             58000.0  130000.0   360000.0  \n",
      " 12             60000.0  100000.0   600000.0  \n",
      " 13             32000.0   49500.0   130000.0  \n",
      " 14             62500.0   97000.0   300000.0  \n",
      " 15             46000.0   75000.0   350000.0  \n",
      " 16             65000.0   85000.0   150000.0  \n",
      " 17             59750.0  106250.0   400000.0  \n",
      " 18             82000.0  140000.0  1000000.0  \n",
      " 19             48000.0   82500.0   350000.0  \n",
      " 20             75000.0  157500.0   330000.0  \n",
      " 21             76500.0  130000.0   230000.0  \n",
      " 22            180000.0  220000.0   260000.0  \n",
      " 23             52000.0   70000.0   150000.0  \n",
      " 24            265000.0  280000.0   700000.0  \n",
      " 25             85000.0  117500.0   270000.0  \n",
      " 26             57000.0   58000.0    59000.0  \n",
      " 27             85000.0  147500.0   210000.0  \n",
      " 28            155000.0  170000.0   170000.0  \n",
      " 29             90100.0   90100.0    90100.0  \n",
      " 30             80000.0  160000.0   220000.0  \n",
      " 32            150000.0  170000.0   190000.0  \n",
      " 33            250000.0  250000.0   250000.0  \n",
      " 34            142500.0  242500.0   400000.0  \n",
      " 35            190000.0  220000.0   250000.0  \n",
      " 36            232500.0  306250.0   380000.0  \n",
      " 37            160000.0  160000.0   160000.0  \n",
      " 39            350000.0  350000.0   350000.0  \n",
      " 40            200000.0  220000.0   240000.0  \n",
      " 41             85000.0   85000.0    85000.0  \n",
      " 43            300000.0  300000.0   300000.0  \n",
      " 44            310000.0  310000.0   310000.0  \n",
      " 45            240000.0  295000.0   350000.0  \n",
      " 46            250000.0  250000.0   250000.0  \n",
      " 47            300000.0  300000.0   300000.0  \n",
      " 48             72500.0   76250.0    80000.0  \n",
      " 49             80000.0   80000.0    80000.0  \n",
      " 50            380000.0  380000.0   380000.0  \n",
      " 53            265000.0  282500.0   300000.0  \n",
      " 60            110000.0  130000.0   150000.0  \n",
      " 65            230000.0  240000.0   250000.0  \n",
      " 76            280000.0  280000.0   280000.0  \n",
      "\n",
      "Correlation between Floor Number and Rent: 0.326\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    }
   ],
   "source": [
    "# First, let's do a basic statistical analysis\n",
    "print(\"Basic Statistics of Rent by Floor:\")\n",
    "print(df.groupby('Floor_Numbers')['Rent'].describe())\n",
    "\n",
    "# Calculate correlation\n",
    "correlation = df['Floor_Numbers'].corr(df['Rent'])\n",
    "print(f\"\\nCorrelation between Floor Number and Rent: {correlation:.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d2b2c251",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.026286Z",
     "iopub.status.busy": "2025-01-29T17:09:00.025911Z",
     "iopub.status.idle": "2025-01-29T17:09:00.041604Z",
     "shell.execute_reply": "2025-01-29T17:09:00.040350Z"
    },
    "papermill": {
     "duration": 0.027591,
     "end_time": "2025-01-29T17:09:00.043574",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.015983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Posted On</th>\n",
       "      <th>BHK</th>\n",
       "      <th>Rent</th>\n",
       "      <th>Size</th>\n",
       "      <th>Area Type</th>\n",
       "      <th>Area Locality</th>\n",
       "      <th>City</th>\n",
       "      <th>Furnishing Status</th>\n",
       "      <th>Tenant Preferred</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Point of Contact</th>\n",
       "      <th>Floor_Numbers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-05-18</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>1100</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Bandel</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>2</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>2</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>2</td>\n",
       "      <td>20000</td>\n",
       "      <td>800</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Phool Bagan, Kankurgachi</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>1</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-05-16</td>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1000</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Salt Lake City Sector 2</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>1</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-07-04</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>800</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Dumdum Park</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>2</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-05-09</td>\n",
       "      <td>2</td>\n",
       "      <td>7500</td>\n",
       "      <td>850</td>\n",
       "      <td>Carpet Area</td>\n",
       "      <td>South Dum Dum</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>2</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Posted On  BHK   Rent  Size    Area Type             Area Locality  \\\n",
       "0  2022-05-18    2  10000  1100   Super Area                    Bandel   \n",
       "1  2022-05-13    2  20000   800   Super Area  Phool Bagan, Kankurgachi   \n",
       "2  2022-05-16    2  17000  1000   Super Area   Salt Lake City Sector 2   \n",
       "3  2022-07-04    2  10000   800   Super Area               Dumdum Park   \n",
       "4  2022-05-09    2   7500   850  Carpet Area             South Dum Dum   \n",
       "\n",
       "      City  Furnishing Status  Tenant Preferred  Bathroom Point of Contact  \\\n",
       "0  Kolkata                  2  Bachelors/Family         2    Contact Owner   \n",
       "1  Kolkata                  1  Bachelors/Family         1    Contact Owner   \n",
       "2  Kolkata                  1  Bachelors/Family         1    Contact Owner   \n",
       "3  Kolkata                  2  Bachelors/Family         1    Contact Owner   \n",
       "4  Kolkata                  2         Bachelors         1    Contact Owner   \n",
       "\n",
       "   Floor_Numbers  \n",
       "0              0  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_encoder = LabelEncoder()\n",
    "df['Furnishing Status'] = label_encoder.fit_transform(df['Furnishing Status'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "21cd4aab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.064340Z",
     "iopub.status.busy": "2025-01-29T17:09:00.063935Z",
     "iopub.status.idle": "2025-01-29T17:09:00.087071Z",
     "shell.execute_reply": "2025-01-29T17:09:00.085928Z"
    },
    "papermill": {
     "duration": 0.035566,
     "end_time": "2025-01-29T17:09:00.089018",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.053452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Posted On</th>\n",
       "      <th>BHK</th>\n",
       "      <th>Rent</th>\n",
       "      <th>Size</th>\n",
       "      <th>Area Type</th>\n",
       "      <th>Area Locality</th>\n",
       "      <th>Furnishing Status</th>\n",
       "      <th>Tenant Preferred</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Point of Contact</th>\n",
       "      <th>Floor_Numbers</th>\n",
       "      <th>City_Chennai</th>\n",
       "      <th>City_Delhi</th>\n",
       "      <th>City_Hyderabad</th>\n",
       "      <th>City_Kolkata</th>\n",
       "      <th>City_Mumbai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-05-18</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>1100</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Bandel</td>\n",
       "      <td>2</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>2</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-05-13</td>\n",
       "      <td>2</td>\n",
       "      <td>20000</td>\n",
       "      <td>800</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Phool Bagan, Kankurgachi</td>\n",
       "      <td>1</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-05-16</td>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1000</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Salt Lake City Sector 2</td>\n",
       "      <td>1</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-07-04</td>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>800</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>Dumdum Park</td>\n",
       "      <td>2</td>\n",
       "      <td>Bachelors/Family</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-05-09</td>\n",
       "      <td>2</td>\n",
       "      <td>7500</td>\n",
       "      <td>850</td>\n",
       "      <td>Carpet Area</td>\n",
       "      <td>South Dum Dum</td>\n",
       "      <td>2</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>1</td>\n",
       "      <td>Contact Owner</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Posted On  BHK   Rent  Size    Area Type             Area Locality  \\\n",
       "0  2022-05-18    2  10000  1100   Super Area                    Bandel   \n",
       "1  2022-05-13    2  20000   800   Super Area  Phool Bagan, Kankurgachi   \n",
       "2  2022-05-16    2  17000  1000   Super Area   Salt Lake City Sector 2   \n",
       "3  2022-07-04    2  10000   800   Super Area               Dumdum Park   \n",
       "4  2022-05-09    2   7500   850  Carpet Area             South Dum Dum   \n",
       "\n",
       "   Furnishing Status  Tenant Preferred  Bathroom Point of Contact  \\\n",
       "0                  2  Bachelors/Family         2    Contact Owner   \n",
       "1                  1  Bachelors/Family         1    Contact Owner   \n",
       "2                  1  Bachelors/Family         1    Contact Owner   \n",
       "3                  2  Bachelors/Family         1    Contact Owner   \n",
       "4                  2         Bachelors         1    Contact Owner   \n",
       "\n",
       "   Floor_Numbers  City_Chennai  City_Delhi  City_Hyderabad  City_Kolkata  \\\n",
       "0              0         False       False           False          True   \n",
       "1              1         False       False           False          True   \n",
       "2              1         False       False           False          True   \n",
       "3              1         False       False           False          True   \n",
       "4              1         False       False           False          True   \n",
       "\n",
       "   City_Mumbai  \n",
       "0        False  \n",
       "1        False  \n",
       "2        False  \n",
       "3        False  \n",
       "4        False  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.get_dummies(df, columns=['City'], drop_first=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bbb50cfe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.109144Z",
     "iopub.status.busy": "2025-01-29T17:09:00.108749Z",
     "iopub.status.idle": "2025-01-29T17:09:00.114850Z",
     "shell.execute_reply": "2025-01-29T17:09:00.113689Z"
    },
    "papermill": {
     "duration": 0.018222,
     "end_time": "2025-01-29T17:09:00.116589",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.098367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(columns=['Point of Contact','Area Locality','Tenant Preferred', 'Posted On'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5b613d21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.136236Z",
     "iopub.status.busy": "2025-01-29T17:09:00.135790Z",
     "iopub.status.idle": "2025-01-29T17:09:00.149795Z",
     "shell.execute_reply": "2025-01-29T17:09:00.148524Z"
    },
    "papermill": {
     "duration": 0.025755,
     "end_time": "2025-01-29T17:09:00.151605",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.125850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BHK</th>\n",
       "      <th>Rent</th>\n",
       "      <th>Size</th>\n",
       "      <th>Area Type</th>\n",
       "      <th>Furnishing Status</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Floor_Numbers</th>\n",
       "      <th>City_Chennai</th>\n",
       "      <th>City_Delhi</th>\n",
       "      <th>City_Hyderabad</th>\n",
       "      <th>City_Kolkata</th>\n",
       "      <th>City_Mumbai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>1100</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20000</td>\n",
       "      <td>800</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1000</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>800</td>\n",
       "      <td>Super Area</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>7500</td>\n",
       "      <td>850</td>\n",
       "      <td>Carpet Area</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   BHK   Rent  Size    Area Type  Furnishing Status  Bathroom  Floor_Numbers  \\\n",
       "0    2  10000  1100   Super Area                  2         2              0   \n",
       "1    2  20000   800   Super Area                  1         1              1   \n",
       "2    2  17000  1000   Super Area                  1         1              1   \n",
       "3    2  10000   800   Super Area                  2         1              1   \n",
       "4    2   7500   850  Carpet Area                  2         1              1   \n",
       "\n",
       "   City_Chennai  City_Delhi  City_Hyderabad  City_Kolkata  City_Mumbai  \n",
       "0         False       False           False          True        False  \n",
       "1         False       False           False          True        False  \n",
       "2         False       False           False          True        False  \n",
       "3         False       False           False          True        False  \n",
       "4         False       False           False          True        False  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8d8915b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.171775Z",
     "iopub.status.busy": "2025-01-29T17:09:00.171350Z",
     "iopub.status.idle": "2025-01-29T17:09:00.179150Z",
     "shell.execute_reply": "2025-01-29T17:09:00.177633Z"
    },
    "papermill": {
     "duration": 0.019899,
     "end_time": "2025-01-29T17:09:00.181064",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.161165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Super Area', 'Carpet Area', 'Built Area'], dtype=object)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Area Type'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d72bb0db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.202333Z",
     "iopub.status.busy": "2025-01-29T17:09:00.201977Z",
     "iopub.status.idle": "2025-01-29T17:09:00.633393Z",
     "shell.execute_reply": "2025-01-29T17:09:00.632223Z"
    },
    "papermill": {
     "duration": 0.444742,
     "end_time": "2025-01-29T17:09:00.635730",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.190988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby('Area Type')['Rent'].mean().sort_values().plot(kind='bar', figsize=(8,5), title=\"Average Price by Area Type\")\n",
    "plt.ylabel(\"Average Price\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "90d423a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.657435Z",
     "iopub.status.busy": "2025-01-29T17:09:00.657009Z",
     "iopub.status.idle": "2025-01-29T17:09:00.666997Z",
     "shell.execute_reply": "2025-01-29T17:09:00.665582Z"
    },
    "papermill": {
     "duration": 0.023629,
     "end_time": "2025-01-29T17:09:00.669531",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.645902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns=['Area Type'], drop_first=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "da69ef64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.691566Z",
     "iopub.status.busy": "2025-01-29T17:09:00.691151Z",
     "iopub.status.idle": "2025-01-29T17:09:00.703440Z",
     "shell.execute_reply": "2025-01-29T17:09:00.702250Z"
    },
    "papermill": {
     "duration": 0.025654,
     "end_time": "2025-01-29T17:09:00.705509",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.679855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Rent                     1.000000\n",
       "Bathroom                 0.441215\n",
       "Size                     0.413551\n",
       "BHK                      0.369718\n",
       "City_Mumbai              0.327038\n",
       "Floor_Numbers            0.326200\n",
       "Area Type_Carpet Area    0.215769\n",
       "City_Delhi              -0.027072\n",
       "City_Chennai            -0.082361\n",
       "City_Hyderabad          -0.087465\n",
       "City_Kolkata            -0.105322\n",
       "Furnishing Status       -0.146251\n",
       "Area Type_Super Area    -0.215499\n",
       "Name: Rent, dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['Rent'].sort_values(ascending=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f5d19db7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.728653Z",
     "iopub.status.busy": "2025-01-29T17:09:00.728221Z",
     "iopub.status.idle": "2025-01-29T17:09:00.737298Z",
     "shell.execute_reply": "2025-01-29T17:09:00.736201Z"
    },
    "papermill": {
     "duration": 0.022321,
     "end_time": "2025-01-29T17:09:00.739501",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.717180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  2,  4,  3,  5,  7,  8, -1, 11, -2,  6, 14, 43, 13, 18, 17,\n",
       "        9, 19, 60, 34, 12, 26, 25, 53, 16, 10, 39, 32, 47, 28, 20, 15, 65,\n",
       "       40, 37, 22, 21, 30, 35, 33, 44, 41, 46, 27, 45, 48, 50, 24, 23, 29,\n",
       "       49, 36, 76])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Floor_Numbers'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "31fefd4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:00.764219Z",
     "iopub.status.busy": "2025-01-29T17:09:00.763862Z",
     "iopub.status.idle": "2025-01-29T17:09:01.097447Z",
     "shell.execute_reply": "2025-01-29T17:09:01.096184Z"
    },
    "papermill": {
     "duration": 0.34704,
     "end_time": "2025-01-29T17:09:01.099528",
     "exception": false,
     "start_time": "2025-01-29T17:09:00.752488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 5))\n",
    "sns.histplot(df['Floor_Numbers'], bins=30, kde=True)\n",
    "plt.title(\"Distribution of Floor Numbers\")\n",
    "plt.xlabel(\"Floor Number\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1930243",
   "metadata": {
    "papermill": {
     "duration": 0.010903,
     "end_time": "2025-01-29T17:09:01.121821",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.110918",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "baafabe8",
   "metadata": {
    "papermill": {
     "duration": 0.010816,
     "end_time": "2025-01-29T17:09:01.144163",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.133347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c38175f",
   "metadata": {
    "papermill": {
     "duration": 0.011339,
     "end_time": "2025-01-29T17:09:01.167275",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.155936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "155efcd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:01.192745Z",
     "iopub.status.busy": "2025-01-29T17:09:01.192280Z",
     "iopub.status.idle": "2025-01-29T17:09:01.205239Z",
     "shell.execute_reply": "2025-01-29T17:09:01.203428Z"
    },
    "papermill": {
     "duration": 0.027981,
     "end_time": "2025-01-29T17:09:01.207247",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.179266",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4746 entries, 0 to 4745\n",
      "Data columns (total 13 columns):\n",
      " #   Column                 Non-Null Count  Dtype\n",
      "---  ------                 --------------  -----\n",
      " 0   BHK                    4746 non-null   int64\n",
      " 1   Rent                   4746 non-null   int64\n",
      " 2   Size                   4746 non-null   int64\n",
      " 3   Furnishing Status      4746 non-null   int64\n",
      " 4   Bathroom               4746 non-null   int64\n",
      " 5   Floor_Numbers          4746 non-null   int64\n",
      " 6   City_Chennai           4746 non-null   bool \n",
      " 7   City_Delhi             4746 non-null   bool \n",
      " 8   City_Hyderabad         4746 non-null   bool \n",
      " 9   City_Kolkata           4746 non-null   bool \n",
      " 10  City_Mumbai            4746 non-null   bool \n",
      " 11  Area Type_Carpet Area  4746 non-null   bool \n",
      " 12  Area Type_Super Area   4746 non-null   bool \n",
      "dtypes: bool(7), int64(6)\n",
      "memory usage: 255.0 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f225fe45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:01.233631Z",
     "iopub.status.busy": "2025-01-29T17:09:01.233220Z",
     "iopub.status.idle": "2025-01-29T17:09:01.245610Z",
     "shell.execute_reply": "2025-01-29T17:09:01.244331Z"
    },
    "papermill": {
     "duration": 0.027295,
     "end_time": "2025-01-29T17:09:01.247939",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.220644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Rent                     1.000000\n",
       "Bathroom                 0.441215\n",
       "Size                     0.413551\n",
       "BHK                      0.369718\n",
       "City_Mumbai              0.327038\n",
       "Floor_Numbers            0.326200\n",
       "Area Type_Carpet Area    0.215769\n",
       "City_Delhi              -0.027072\n",
       "City_Chennai            -0.082361\n",
       "City_Hyderabad          -0.087465\n",
       "City_Kolkata            -0.105322\n",
       "Furnishing Status       -0.146251\n",
       "Area Type_Super Area    -0.215499\n",
       "Name: Rent, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['Rent'].sort_values(ascending=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a801c4f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:01.272726Z",
     "iopub.status.busy": "2025-01-29T17:09:01.272307Z",
     "iopub.status.idle": "2025-01-29T17:09:01.278247Z",
     "shell.execute_reply": "2025-01-29T17:09:01.277022Z"
    },
    "papermill": {
     "duration": 0.020891,
     "end_time": "2025-01-29T17:09:01.280349",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.259458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(columns=['City_Delhi', 'City_Chennai', 'City_Hyderabad', 'City_Kolkata',\n",
    "                 'Furnishing Status', 'Area Type_Super Area'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "87e9c70e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:01.306666Z",
     "iopub.status.busy": "2025-01-29T17:09:01.306222Z",
     "iopub.status.idle": "2025-01-29T17:09:01.318287Z",
     "shell.execute_reply": "2025-01-29T17:09:01.316903Z"
    },
    "papermill": {
     "duration": 0.027301,
     "end_time": "2025-01-29T17:09:01.320256",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.292955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BHK</th>\n",
       "      <th>Rent</th>\n",
       "      <th>Size</th>\n",
       "      <th>Bathroom</th>\n",
       "      <th>Floor_Numbers</th>\n",
       "      <th>City_Mumbai</th>\n",
       "      <th>Area Type_Carpet Area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>1100</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20000</td>\n",
       "      <td>800</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>800</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>7500</td>\n",
       "      <td>850</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   BHK   Rent  Size  Bathroom  Floor_Numbers  City_Mumbai  \\\n",
       "0    2  10000  1100         2              0        False   \n",
       "1    2  20000   800         1              1        False   \n",
       "2    2  17000  1000         1              1        False   \n",
       "3    2  10000   800         1              1        False   \n",
       "4    2   7500   850         1              1        False   \n",
       "\n",
       "   Area Type_Carpet Area  \n",
       "0                  False  \n",
       "1                  False  \n",
       "2                  False  \n",
       "3                  False  \n",
       "4                   True  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a7e45022",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:01.345512Z",
     "iopub.status.busy": "2025-01-29T17:09:01.345095Z",
     "iopub.status.idle": "2025-01-29T17:09:01.356461Z",
     "shell.execute_reply": "2025-01-29T17:09:01.354961Z"
    },
    "papermill": {
     "duration": 0.026199,
     "end_time": "2025-01-29T17:09:01.358449",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.332250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4746 entries, 0 to 4745\n",
      "Data columns (total 7 columns):\n",
      " #   Column                 Non-Null Count  Dtype\n",
      "---  ------                 --------------  -----\n",
      " 0   BHK                    4746 non-null   int64\n",
      " 1   Rent                   4746 non-null   int64\n",
      " 2   Size                   4746 non-null   int64\n",
      " 3   Bathroom               4746 non-null   int64\n",
      " 4   Floor_Numbers          4746 non-null   int64\n",
      " 5   City_Mumbai            4746 non-null   bool \n",
      " 6   Area Type_Carpet Area  4746 non-null   bool \n",
      "dtypes: bool(2), int64(5)\n",
      "memory usage: 194.8 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "19f777c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T17:09:01.383956Z",
     "iopub.status.busy": "2025-01-29T17:09:01.383580Z",
     "iopub.status.idle": "2025-01-29T17:09:01.840162Z",
     "shell.execute_reply": "2025-01-29T17:09:01.838506Z"
    },
    "papermill": {
     "duration": 0.471746,
     "end_time": "2025-01-29T17:09:01.842196",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.370450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 1964091217.8174355\n",
      "R-squared: 0.5071760864251366\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Import necessary libraries\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# Assuming your dataset is named df\n",
    "# Step 2: Split data into features (X) and target (y)\n",
    "X = df.drop('Rent', axis=1)  # Features\n",
    "y = df['Rent']  # Target variable\n",
    "\n",
    "# Step 3: Split the data into training and testing sets (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Step 4: Initialize the model and train it\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Step 5: Make predictions on the test set\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Step 6: Evaluate the model\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Mean Squared Error: {mse}\")\n",
    "print(f\"R-squared: {r2}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21cdeccc",
   "metadata": {
    "papermill": {
     "duration": 0.011317,
     "end_time": "2025-01-29T17:09:01.865243",
     "exception": false,
     "start_time": "2025-01-29T17:09:01.853926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2355600,
     "sourceId": 4097760,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30839,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.283336,
   "end_time": "2025-01-29T17:09:02.699789",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-29T17:08:51.416453",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
